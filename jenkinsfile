pipeline {
    agent any

    environment {
        // Fetch Docker Hub credentials from Jenkins credentials store
        DOCKER_HUB_USERNAME = 'raghurk' // Your Docker Hub username
        DOCKER_HUB_PASSWORD = credentials('docker-hub') // Stored in Jenkins credentials as password
        FRONTEND_IMAGE = "raghurk/frontend-app" // Docker Hub frontend image
        BACKEND_IMAGE = "raghurk/backend-app"   // Docker Hub backend image
        EC2_HOST = "3.110.163.150"   // EC2 instance public IP
        SSH_KEY = credentials('aws-ssh-key')      // AWS EC2 SSH key stored in Jenkins credentials
    }

    stages {
        stage('Clone Repository') {
            steps {
                script {
                    echo "Cloning Git Repository..."
                    git url: 'https://github.com/Raghu273/mern-cicd', branch: 'dev' // Your GitHub repository
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    echo "Building Frontend Docker Image..."
                    sh "docker build -t $FRONTEND_IMAGE:latest frontend/"
                    
                    echo "Building Backend Docker Image..."
                    sh "docker build -t $BACKEND_IMAGE:latest backend/"
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    echo "Logging into Docker Hub..."
                    // Using the Jenkins credentials to log in to Docker Hub
                    sh "echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin"

                    echo "Pushing Frontend Image..."
                    sh "docker push $FRONTEND_IMAGE:latest"

                    echo "Pushing Backend Image..."
                    sh "docker push $BACKEND_IMAGE:latest"
                }
            }
        }

        stage('Deploy on AWS EC2') {
            steps {
                script {
                    echo "Deploying containers on EC2..."
                    sh """
                        ssh -o StrictHostKeyChecking=no -i $SSH_KEY ubuntu@$EC2_HOST << 'EOF'
                            # Pull the latest Docker images
                            sudo docker pull $FRONTEND_IMAGE:latest
                            sudo docker pull $BACKEND_IMAGE:latest

                            # Stop and remove existing containers if running
                            sudo docker rm -f frontend-app || true
                            sudo docker rm -f backend-app || true

                            # Run the new containers
                            sudo docker run -d -p 3000:3000 --name frontend-app $FRONTEND_IMAGE:latest
                            sudo docker run -d -p 5000:5000 --name backend-app $BACKEND_IMAGE:latest
                        EOF
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployment successful!"
        }
        failure {
            echo "Pipeline failed. Check logs for details."
        }
    }
}
